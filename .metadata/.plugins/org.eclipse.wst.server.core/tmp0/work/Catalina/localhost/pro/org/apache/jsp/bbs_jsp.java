/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.54
 * Generated at: 2021-11-11 05:55:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.PrintWriter;
import bbs.BbsDAO;
import bbs.Bbs;
import java.util.ArrayList;

public final class bbs_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("bbs.Bbs");
    _jspx_imports_classes.add("bbs.BbsDAO");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<!-- 화면 최적화 -->\n");
      out.write("<meta name=\"viewport\" content=\"width-device-width\", initial-scale=\"1\">\n");
      out.write("<!-- 루트 폴더에 부트스트랩을 참조하는 링크 -->\n");
      out.write("<link rel=\"stylesheet\" href=\"css/bootstrap.css\">\n");
      out.write("<title>JSP 게시판 웹 사이트</title>\n");
      out.write("<style type=\"text/css\">\n");
      out.write("	a, a:hover{\n");
      out.write("		color: #000000;\n");
      out.write("		text-decoration: none;\n");
      out.write("	}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	");

		// 메인 페이지로 이동했을 때 세션에 값이 담겨있는지 체크
		String userID = null;
		if(session.getAttribute("userID") != null){
			userID = (String)session.getAttribute("userID");
		}
		int pageNumber = 1; //기본은 1 페이지를 할당
		// 만약 파라미터로 넘어온 오브젝트 타입 'pageNumber'가 존재한다면
		// 'int'타입으로 캐스팅을 해주고 그 값을 'pageNumber'변수에 저장한다
		if(request.getParameter("pageNumber") != null){
			pageNumber = Integer.parseInt(request.getParameter("pageNumber"));
		}
	
      out.write("\n");
      out.write("	<nav class=\"navbar navbar-default\"> <!-- 네비게이션 -->\n");
      out.write("		<div class=\"navbar-header\"> 	<!-- 네비게이션 상단 부분 -->\n");
      out.write("			<!-- 네비게이션 상단 박스 영역 -->\n");
      out.write("			<button type=\"button\" class=\"navbar-toggle collapsed\"\n");
      out.write("				data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\"\n");
      out.write("				aria-expanded=\"false\">\n");
      out.write("				<!-- 이 삼줄 버튼은 화면이 좁아지면 우측에 나타난다 -->\n");
      out.write("				<span class=\"icon-bar\"></span>\n");
      out.write("				<span class=\"icon-bar\"></span>\n");
      out.write("				<span class=\"icon-bar\"></span>\n");
      out.write("			</button>\n");
      out.write("			<!-- 상단 바에 제목이 나타나고 클릭하면 main 페이지로 이동한다 -->\n");
      out.write("			<a class=\"navbar-brand\" href=\"main.jsp\">JSP 게시판 웹 사이트</a>\n");
      out.write("		</div>\n");
      out.write("		<!-- 게시판 제목 이름 옆에 나타나는 메뉴 영역 -->\n");
      out.write("		<div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\n");
      out.write("			<ul class=\"nav navbar-nav\">\n");
      out.write("				<li><a href=\"main.jsp\">메인</a></li>\n");
      out.write("				<li class=\"active\"><a href=\"bbs.jsp\">게시판</a></li>\n");
      out.write("			</ul>\n");
      out.write("			");

				// 로그인 하지 않았을 때 보여지는 화면
				if(userID == null){
			
      out.write("\n");
      out.write("			<!-- 헤더 우측에 나타나는 드랍다운 영역 -->\n");
      out.write("			<ul class=\"nav navbar-nav navbar-right\">\n");
      out.write("				<li class=\"dropdown\">\n");
      out.write("					<a href=\"#\" class=\"dropdown-toggle\"\n");
      out.write("						data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\"\n");
      out.write("						aria-expanded=\"false\">접속하기<span class=\"caret\"></span></a>\n");
      out.write("					<!-- 드랍다운 아이템 영역 -->	\n");
      out.write("					<ul class=\"dropdown-menu\">\n");
      out.write("						<li><a href=\"login.jsp\">로그인</a></li>\n");
      out.write("						<li><a href=\"join.jsp\">회원가입</a></li>\n");
      out.write("					</ul>\n");
      out.write("				</li>\n");
      out.write("			</ul>\n");
      out.write("			");

				// 로그인이 되어 있는 상태에서 보여주는 화면
				}else{
			
      out.write("\n");
      out.write("			<!-- 헤더 우측에 나타나는 드랍다운 영역 -->\n");
      out.write("			<ul class=\"nav navbar-nav navbar-right\">\n");
      out.write("				<li class=\"dropdown\">\n");
      out.write("					<a href=\"#\" class=\"dropdown-toggle\"\n");
      out.write("						data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\"\n");
      out.write("						aria-expanded=\"false\">회원관리<span class=\"caret\"></span></a>\n");
      out.write("					<!-- 드랍다운 아이템 영역 -->	\n");
      out.write("					<ul class=\"dropdown-menu\">\n");
      out.write("						<li><a href=\"logoutAction.jsp\">로그아웃</a></li>\n");
      out.write("					</ul>\n");
      out.write("				</li>\n");
      out.write("			</ul>\n");
      out.write("			");

				}
			
      out.write("\n");
      out.write("		</div>\n");
      out.write("	</nav>\n");
      out.write("	<!-- 네비게이션 영역 끝 -->\n");
      out.write("	\n");
      out.write("	<!-- 게시판 메인 페이지 영역 시작 -->\n");
      out.write("	<div class=\"container\">\n");
      out.write("		<div class=\"row\">\n");
      out.write("			<table class=\"table table-striped\" style=\"text-align: center; border: 1px solid #dddddd\">\n");
      out.write("				<thead>\n");
      out.write("					<tr>\n");
      out.write("						<th style=\"background-color: #eeeeee; text-align: center;\">번호</th>\n");
      out.write("						<th style=\"background-color: #eeeeee; text-align: center;\">제목</th>\n");
      out.write("						<th style=\"background-color: #eeeeee; text-align: center;\">작성자</th>\n");
      out.write("						<th style=\"background-color: #eeeeee; text-align: center;\">작성일</th>\n");
      out.write("					</tr>\n");
      out.write("				</thead>\n");
      out.write("				<tbody>\n");
      out.write("					");

						BbsDAO bbsDAO = new BbsDAO(); // 인스턴스 생성
						ArrayList<Bbs> list = bbsDAO.getList(pageNumber);
						for(int i = 0; i < list.size(); i++){
					
      out.write("\n");
      out.write("					<tr>\n");
      out.write("						<td>");
      out.print( list.get(i).getBbsID() );
      out.write("</td>\n");
      out.write("						<!-- 게시글 제목을 누르면 해당 글을 볼 수 있도록 링크를 걸어둔다 -->\n");
      out.write("						<td><a href=\"view.jsp?bbsID=");
      out.print( list.get(i).getBbsID() );
      out.write("\">\n");
      out.write("							");
      out.print( list.get(i).getBbsTitle() );
      out.write("</a></td>\n");
      out.write("						<td>");
      out.print( list.get(i).getUserID() );
      out.write("</td>\n");
      out.write("						<td>");
      out.print( list.get(i).getBbsDate().substring(0, 11) + list.get(i).getBbsDate().substring(11, 13) + "시"
							+ list.get(i).getBbsDate().substring(14, 16) + "분" );
      out.write("</td>\n");
      out.write("					</tr>\n");
      out.write("					");

						}
					
      out.write("\n");
      out.write("				</tbody>\n");
      out.write("			</table>\n");
      out.write("			\n");
      out.write("			<!-- 페이징 처리 영역 -->\n");
      out.write("			");

				if(pageNumber != 1){
			
      out.write("\n");
      out.write("				<a href=\"bbs.jsp?pageNumber=");
      out.print(pageNumber - 1 );
      out.write("\"\n");
      out.write("					class=\"btn btn-success btn-arraw-left\">이전</a>\n");
      out.write("			");

				}if(bbsDAO.nextPage(pageNumber + 1)){
			
      out.write("\n");
      out.write("				<a href=\"bbs.jsp?pageNumber=");
      out.print(pageNumber + 1 );
      out.write("\"\n");
      out.write("					class=\"btn btn-success btn-arraw-left\">다음</a>\n");
      out.write("			");

				}
			
      out.write("\n");
      out.write("			\n");
      out.write("			<!-- 글쓰기 버튼 생성 -->\n");
      out.write("			<a href=\"write.jsp\" class=\"btn btn-primary pull-right\">글쓰기</a>\n");
      out.write("		</div>\n");
      out.write("	</div>\n");
      out.write("	<!-- 게시판 메인 페이지 영역 끝 -->\n");
      out.write("	\n");
      out.write("	<!-- 부트스트랩 참조 영역 -->\n");
      out.write("	<script src=\"https://code.jquery.com/jquery-3.1.1.min.js\"></script>\n");
      out.write("	<script src=\"js/bootstrap.js\"></script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
